/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Hupiukko API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CompleteSetRequest,
  CreateWorkoutProgramRequest,
  StartWorkoutRequest,
  WorkoutProgramDto,
  WorkoutSessionDto,
  WorkoutSetDto
} from '../hupiukkoAPI.schemas';





export const getWorkoutProgramsUserUserId = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WorkoutProgramDto[]>> => {
    
    
    return axios.get(
      `/api/proxy/Workout/programs/user/${userId}`,options
    );
  }


export const getGetWorkoutProgramsUserUserIdQueryKey = (userId: string,) => {
    return [`/api/proxy/Workout/programs/user/${userId}`] as const;
    }

    
export const getGetWorkoutProgramsUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>, TError = AxiosError<unknown>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkoutProgramsUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>> = ({ signal }) => getWorkoutProgramsUserUserId(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkoutProgramsUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>>
export type GetWorkoutProgramsUserUserIdQueryError = AxiosError<unknown>


export function useGetWorkoutProgramsUserUserId<TData = Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>, TError = AxiosError<unknown>>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkoutProgramsUserUserId<TData = Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkoutProgramsUserUserId<TData = Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetWorkoutProgramsUserUserId<TData = Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsUserUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkoutProgramsUserUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postWorkoutProgramsUserUserId = (
    userId: string,
    createWorkoutProgramRequest: CreateWorkoutProgramRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WorkoutProgramDto>> => {
    
    
    return axios.post(
      `/api/proxy/Workout/programs/user/${userId}`,
      createWorkoutProgramRequest,options
    );
  }



export const getPostWorkoutProgramsUserUserIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWorkoutProgramsUserUserId>>, TError,{userId: string;data: CreateWorkoutProgramRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postWorkoutProgramsUserUserId>>, TError,{userId: string;data: CreateWorkoutProgramRequest}, TContext> => {

const mutationKey = ['postWorkoutProgramsUserUserId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWorkoutProgramsUserUserId>>, {userId: string;data: CreateWorkoutProgramRequest}> = (props) => {
          const {userId,data} = props ?? {};

          return  postWorkoutProgramsUserUserId(userId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWorkoutProgramsUserUserIdMutationResult = NonNullable<Awaited<ReturnType<typeof postWorkoutProgramsUserUserId>>>
    export type PostWorkoutProgramsUserUserIdMutationBody = CreateWorkoutProgramRequest
    export type PostWorkoutProgramsUserUserIdMutationError = AxiosError<unknown>

    export const usePostWorkoutProgramsUserUserId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWorkoutProgramsUserUserId>>, TError,{userId: string;data: CreateWorkoutProgramRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postWorkoutProgramsUserUserId>>,
        TError,
        {userId: string;data: CreateWorkoutProgramRequest},
        TContext
      > => {

      const mutationOptions = getPostWorkoutProgramsUserUserIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getWorkoutProgramsId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WorkoutProgramDto>> => {
    
    
    return axios.get(
      `/api/proxy/Workout/programs/${id}`,options
    );
  }


export const getGetWorkoutProgramsIdQueryKey = (id: string,) => {
    return [`/api/proxy/Workout/programs/${id}`] as const;
    }

    
export const getGetWorkoutProgramsIdQueryOptions = <TData = Awaited<ReturnType<typeof getWorkoutProgramsId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkoutProgramsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkoutProgramsId>>> = ({ signal }) => getWorkoutProgramsId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkoutProgramsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkoutProgramsId>>>
export type GetWorkoutProgramsIdQueryError = AxiosError<unknown>


export function useGetWorkoutProgramsId<TData = Awaited<ReturnType<typeof getWorkoutProgramsId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkoutProgramsId>>,
          TError,
          Awaited<ReturnType<typeof getWorkoutProgramsId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkoutProgramsId<TData = Awaited<ReturnType<typeof getWorkoutProgramsId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkoutProgramsId>>,
          TError,
          Awaited<ReturnType<typeof getWorkoutProgramsId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkoutProgramsId<TData = Awaited<ReturnType<typeof getWorkoutProgramsId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetWorkoutProgramsId<TData = Awaited<ReturnType<typeof getWorkoutProgramsId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutProgramsId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkoutProgramsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getWorkoutSessionsUserUserId = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WorkoutSessionDto[]>> => {
    
    
    return axios.get(
      `/api/proxy/Workout/sessions/user/${userId}`,options
    );
  }


export const getGetWorkoutSessionsUserUserIdQueryKey = (userId: string,) => {
    return [`/api/proxy/Workout/sessions/user/${userId}`] as const;
    }

    
export const getGetWorkoutSessionsUserUserIdQueryOptions = <TData = Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>, TError = AxiosError<unknown>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkoutSessionsUserUserIdQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>> = ({ signal }) => getWorkoutSessionsUserUserId(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkoutSessionsUserUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>>
export type GetWorkoutSessionsUserUserIdQueryError = AxiosError<unknown>


export function useGetWorkoutSessionsUserUserId<TData = Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>, TError = AxiosError<unknown>>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkoutSessionsUserUserId<TData = Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>,
          TError,
          Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkoutSessionsUserUserId<TData = Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetWorkoutSessionsUserUserId<TData = Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkoutSessionsUserUserIdQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getWorkoutSessionsId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WorkoutSessionDto>> => {
    
    
    return axios.get(
      `/api/proxy/Workout/sessions/${id}`,options
    );
  }


export const getGetWorkoutSessionsIdQueryKey = (id: string,) => {
    return [`/api/proxy/Workout/sessions/${id}`] as const;
    }

    
export const getGetWorkoutSessionsIdQueryOptions = <TData = Awaited<ReturnType<typeof getWorkoutSessionsId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkoutSessionsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkoutSessionsId>>> = ({ signal }) => getWorkoutSessionsId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkoutSessionsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkoutSessionsId>>>
export type GetWorkoutSessionsIdQueryError = AxiosError<unknown>


export function useGetWorkoutSessionsId<TData = Awaited<ReturnType<typeof getWorkoutSessionsId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkoutSessionsId>>,
          TError,
          Awaited<ReturnType<typeof getWorkoutSessionsId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkoutSessionsId<TData = Awaited<ReturnType<typeof getWorkoutSessionsId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkoutSessionsId>>,
          TError,
          Awaited<ReturnType<typeof getWorkoutSessionsId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkoutSessionsId<TData = Awaited<ReturnType<typeof getWorkoutSessionsId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetWorkoutSessionsId<TData = Awaited<ReturnType<typeof getWorkoutSessionsId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkoutSessionsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getWorkoutSessionsUserUserIdActive = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WorkoutSessionDto>> => {
    
    
    return axios.get(
      `/api/proxy/Workout/sessions/user/${userId}/active`,options
    );
  }


export const getGetWorkoutSessionsUserUserIdActiveQueryKey = (userId: string,) => {
    return [`/api/proxy/Workout/sessions/user/${userId}/active`] as const;
    }

    
export const getGetWorkoutSessionsUserUserIdActiveQueryOptions = <TData = Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>, TError = AxiosError<unknown>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWorkoutSessionsUserUserIdActiveQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>> = ({ signal }) => getWorkoutSessionsUserUserIdActive(userId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWorkoutSessionsUserUserIdActiveQueryResult = NonNullable<Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>>
export type GetWorkoutSessionsUserUserIdActiveQueryError = AxiosError<unknown>


export function useGetWorkoutSessionsUserUserIdActive<TData = Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>, TError = AxiosError<unknown>>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>,
          TError,
          Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkoutSessionsUserUserIdActive<TData = Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>,
          TError,
          Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWorkoutSessionsUserUserIdActive<TData = Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetWorkoutSessionsUserUserIdActive<TData = Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>, TError = AxiosError<unknown>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorkoutSessionsUserUserIdActive>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWorkoutSessionsUserUserIdActiveQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postWorkoutSessionsUserUserIdStart = (
    userId: string,
    startWorkoutRequest: StartWorkoutRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WorkoutSessionDto>> => {
    
    
    return axios.post(
      `/api/proxy/Workout/sessions/user/${userId}/start`,
      startWorkoutRequest,options
    );
  }



export const getPostWorkoutSessionsUserUserIdStartMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWorkoutSessionsUserUserIdStart>>, TError,{userId: string;data: StartWorkoutRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postWorkoutSessionsUserUserIdStart>>, TError,{userId: string;data: StartWorkoutRequest}, TContext> => {

const mutationKey = ['postWorkoutSessionsUserUserIdStart'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWorkoutSessionsUserUserIdStart>>, {userId: string;data: StartWorkoutRequest}> = (props) => {
          const {userId,data} = props ?? {};

          return  postWorkoutSessionsUserUserIdStart(userId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWorkoutSessionsUserUserIdStartMutationResult = NonNullable<Awaited<ReturnType<typeof postWorkoutSessionsUserUserIdStart>>>
    export type PostWorkoutSessionsUserUserIdStartMutationBody = StartWorkoutRequest
    export type PostWorkoutSessionsUserUserIdStartMutationError = AxiosError<unknown>

    export const usePostWorkoutSessionsUserUserIdStart = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWorkoutSessionsUserUserIdStart>>, TError,{userId: string;data: StartWorkoutRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postWorkoutSessionsUserUserIdStart>>,
        TError,
        {userId: string;data: StartWorkoutRequest},
        TContext
      > => {

      const mutationOptions = getPostWorkoutSessionsUserUserIdStartMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postWorkoutSessionsSessionIdComplete = (
    sessionId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WorkoutSessionDto>> => {
    
    
    return axios.post(
      `/api/proxy/Workout/sessions/${sessionId}/complete`,undefined,options
    );
  }



export const getPostWorkoutSessionsSessionIdCompleteMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWorkoutSessionsSessionIdComplete>>, TError,{sessionId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postWorkoutSessionsSessionIdComplete>>, TError,{sessionId: string}, TContext> => {

const mutationKey = ['postWorkoutSessionsSessionIdComplete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWorkoutSessionsSessionIdComplete>>, {sessionId: string}> = (props) => {
          const {sessionId} = props ?? {};

          return  postWorkoutSessionsSessionIdComplete(sessionId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWorkoutSessionsSessionIdCompleteMutationResult = NonNullable<Awaited<ReturnType<typeof postWorkoutSessionsSessionIdComplete>>>
    
    export type PostWorkoutSessionsSessionIdCompleteMutationError = AxiosError<unknown>

    export const usePostWorkoutSessionsSessionIdComplete = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWorkoutSessionsSessionIdComplete>>, TError,{sessionId: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postWorkoutSessionsSessionIdComplete>>,
        TError,
        {sessionId: string},
        TContext
      > => {

      const mutationOptions = getPostWorkoutSessionsSessionIdCompleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const postWorkoutSetsSetIdComplete = (
    setId: string,
    completeSetRequest: CompleteSetRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WorkoutSetDto>> => {
    
    
    return axios.post(
      `/api/proxy/Workout/sets/${setId}/complete`,
      completeSetRequest,options
    );
  }



export const getPostWorkoutSetsSetIdCompleteMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWorkoutSetsSetIdComplete>>, TError,{setId: string;data: CompleteSetRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postWorkoutSetsSetIdComplete>>, TError,{setId: string;data: CompleteSetRequest}, TContext> => {

const mutationKey = ['postWorkoutSetsSetIdComplete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postWorkoutSetsSetIdComplete>>, {setId: string;data: CompleteSetRequest}> = (props) => {
          const {setId,data} = props ?? {};

          return  postWorkoutSetsSetIdComplete(setId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostWorkoutSetsSetIdCompleteMutationResult = NonNullable<Awaited<ReturnType<typeof postWorkoutSetsSetIdComplete>>>
    export type PostWorkoutSetsSetIdCompleteMutationBody = CompleteSetRequest
    export type PostWorkoutSetsSetIdCompleteMutationError = AxiosError<unknown>

    export const usePostWorkoutSetsSetIdComplete = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postWorkoutSetsSetIdComplete>>, TError,{setId: string;data: CompleteSetRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postWorkoutSetsSetIdComplete>>,
        TError,
        {setId: string;data: CompleteSetRequest},
        TContext
      > => {

      const mutationOptions = getPostWorkoutSetsSetIdCompleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    