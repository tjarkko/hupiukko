/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Hupiukko API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateExerciseRequest,
  ExerciseCategoryDto,
  ExerciseDto
} from '../hupiukkoAPI.schemas';





export const getExercisesCategories = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExerciseCategoryDto[]>> => {
    
    
    return axios.get(
      `/api/proxy/Exercises/categories`,options
    );
  }


export const getGetExercisesCategoriesQueryKey = () => {
    return [`/api/proxy/Exercises/categories`] as const;
    }

    
export const getGetExercisesCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getExercisesCategories>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesCategories>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExercisesCategoriesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExercisesCategories>>> = ({ signal }) => getExercisesCategories({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExercisesCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExercisesCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getExercisesCategories>>>
export type GetExercisesCategoriesQueryError = AxiosError<unknown>


export function useGetExercisesCategories<TData = Awaited<ReturnType<typeof getExercisesCategories>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExercisesCategories>>,
          TError,
          Awaited<ReturnType<typeof getExercisesCategories>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExercisesCategories<TData = Awaited<ReturnType<typeof getExercisesCategories>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExercisesCategories>>,
          TError,
          Awaited<ReturnType<typeof getExercisesCategories>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExercisesCategories<TData = Awaited<ReturnType<typeof getExercisesCategories>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesCategories>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetExercisesCategories<TData = Awaited<ReturnType<typeof getExercisesCategories>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesCategories>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetExercisesCategoriesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getExercises = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExerciseDto[]>> => {
    
    
    return axios.get(
      `/api/proxy/Exercises`,options
    );
  }


export const getGetExercisesQueryKey = () => {
    return [`/api/proxy/Exercises`] as const;
    }

    
export const getGetExercisesQueryOptions = <TData = Awaited<ReturnType<typeof getExercises>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercises>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExercisesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExercises>>> = ({ signal }) => getExercises({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExercises>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExercisesQueryResult = NonNullable<Awaited<ReturnType<typeof getExercises>>>
export type GetExercisesQueryError = AxiosError<unknown>


export function useGetExercises<TData = Awaited<ReturnType<typeof getExercises>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercises>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExercises>>,
          TError,
          Awaited<ReturnType<typeof getExercises>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExercises<TData = Awaited<ReturnType<typeof getExercises>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercises>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExercises>>,
          TError,
          Awaited<ReturnType<typeof getExercises>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExercises<TData = Awaited<ReturnType<typeof getExercises>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercises>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetExercises<TData = Awaited<ReturnType<typeof getExercises>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercises>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetExercisesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postExercises = (
    createExerciseRequest: CreateExerciseRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExerciseDto>> => {
    
    
    return axios.post(
      `/api/proxy/Exercises`,
      createExerciseRequest,options
    );
  }



export const getPostExercisesMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postExercises>>, TError,{data: CreateExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postExercises>>, TError,{data: CreateExerciseRequest}, TContext> => {

const mutationKey = ['postExercises'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postExercises>>, {data: CreateExerciseRequest}> = (props) => {
          const {data} = props ?? {};

          return  postExercises(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostExercisesMutationResult = NonNullable<Awaited<ReturnType<typeof postExercises>>>
    export type PostExercisesMutationBody = CreateExerciseRequest
    export type PostExercisesMutationError = AxiosError<unknown>

    export const usePostExercises = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postExercises>>, TError,{data: CreateExerciseRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postExercises>>,
        TError,
        {data: CreateExerciseRequest},
        TContext
      > => {

      const mutationOptions = getPostExercisesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getExercisesByCategoryCategoryId = (
    categoryId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExerciseDto[]>> => {
    
    
    return axios.get(
      `/api/proxy/Exercises/by-category/${categoryId}`,options
    );
  }


export const getGetExercisesByCategoryCategoryIdQueryKey = (categoryId: string,) => {
    return [`/api/proxy/Exercises/by-category/${categoryId}`] as const;
    }

    
export const getGetExercisesByCategoryCategoryIdQueryOptions = <TData = Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>, TError = AxiosError<unknown>>(categoryId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExercisesByCategoryCategoryIdQueryKey(categoryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>> = ({ signal }) => getExercisesByCategoryCategoryId(categoryId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(categoryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExercisesByCategoryCategoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>>
export type GetExercisesByCategoryCategoryIdQueryError = AxiosError<unknown>


export function useGetExercisesByCategoryCategoryId<TData = Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>, TError = AxiosError<unknown>>(
 categoryId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>,
          TError,
          Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExercisesByCategoryCategoryId<TData = Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>, TError = AxiosError<unknown>>(
 categoryId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>,
          TError,
          Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExercisesByCategoryCategoryId<TData = Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>, TError = AxiosError<unknown>>(
 categoryId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetExercisesByCategoryCategoryId<TData = Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>, TError = AxiosError<unknown>>(
 categoryId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesByCategoryCategoryId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetExercisesByCategoryCategoryIdQueryOptions(categoryId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getExercisesId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ExerciseDto>> => {
    
    
    return axios.get(
      `/api/proxy/Exercises/${id}`,options
    );
  }


export const getGetExercisesIdQueryKey = (id: string,) => {
    return [`/api/proxy/Exercises/${id}`] as const;
    }

    
export const getGetExercisesIdQueryOptions = <TData = Awaited<ReturnType<typeof getExercisesId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetExercisesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getExercisesId>>> = ({ signal }) => getExercisesId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getExercisesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetExercisesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getExercisesId>>>
export type GetExercisesIdQueryError = AxiosError<unknown>


export function useGetExercisesId<TData = Awaited<ReturnType<typeof getExercisesId>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExercisesId>>,
          TError,
          Awaited<ReturnType<typeof getExercisesId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExercisesId<TData = Awaited<ReturnType<typeof getExercisesId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getExercisesId>>,
          TError,
          Awaited<ReturnType<typeof getExercisesId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetExercisesId<TData = Awaited<ReturnType<typeof getExercisesId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetExercisesId<TData = Awaited<ReturnType<typeof getExercisesId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getExercisesId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetExercisesIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



